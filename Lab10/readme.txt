Team : Jai Pal Singh (2015kucp1038)
        S. Ilayaraja (2015kucp1030)
		
Steps Performed:
	1. In the previously installed and configured Pintos, I ran make command to create build directory and then set the kernel.bin and loader.bin path in build directory of userprog.
	2. I decremented the value of *esp by 12 in process.c in userprog directory as I have not enabled argument passing.
	3. To give a process time to execute completely, I have changed process-wait to an infinite loop.
	4. Then as given in the Pintos documentation, I created a file system using following commands:
		pintos-mkdisk filesys.dsk --filesys-size=2 
			(This command creates a simulated disk named ‘filesys.dsk’ that contains a 2 MB Pintos file system partition)
		pintos -f -q
			(format the file system partition by passing ‘-f -q’. The ‘-f’ option causes the file system to be formatted, and ‘-q’ causes Pintos to exit as soon as the format is done. )
	5.  To copy ‘file’ into the Pintos file system, I used the command ‘pintos -p file -- -q’. For example: 
		pintos -p ../../examples/echo -a echo -- -q
			(adds echo file in the file system)
		pintos -q run 'echo'
			(runs the echo file)
			
	6. Then I implemented the system call. In syscall.c, I implemented a function named - ‘syscall_handler’ to handle all the system calls in the kernel space. This function handles the interrupt generated by a user program.
	7. When a system call is called by a program then the system_handler retrieve the system call number and carry out the appropriate actions. These system call numbers for each system call are defined in "lib/user/syscall-nr.h".
	8. I used these system call numbers to implement these system call using switch cases. For example- to call halt system call, I used the value of SYS_HALT. The halt function then calls shutdown_power_off function defined in src/devices folder which shuts down the system.
	9. The halt system call takes no arguments. There are other system calls which take arguments. These arguments are stored in the stack and hence can be extracted by decrementing the esp pointer and storing the value.
	10. similarly, all other system calls are implemented.
